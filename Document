# Spring IoC (Inversion of Control) with Annotations and Java Configuration

This document covers the Spring IoC container, exploring how to use annotations and Java-based configuration to manage beans and their lifecycle efficiently.

---

## What is Spring IoC?
Spring IoC (Inversion of Control) is a core concept in the Spring Framework. It refers to the principle of delegating the control of object creation and dependency management to the Spring container.

### Key Components:
| Component      | Description                                    |
|----------------|------------------------------------------------|
| IoC Container  | Manages the lifecycle of beans in Spring.      |
| Bean           | An object managed by the Spring container.     |
| Dependency Injection | The process of providing dependencies to beans. |

---

## Bean Lifecycle in Spring with Annotations and Java Configuration

### 1. Create a Spring IoC Container
With Java-based configuration, you create the IoC container using `AnnotationConfigApplicationContext`.

### 2. Bean Creation and Configuration
In Spring, you can create and configure beans using:
- Annotations (`@Component`, `@Bean`, `@Configuration`, etc.)
- Java-based configuration

### 3. Dependency Injection
Inject dependencies using:
- `@Autowired` (Field/Setter/Constructor Injection)
- `@Qualifier` for specifying a particular bean

---

## Steps to Implement IoC with Annotations and Java Configuration

### 1. Using Annotations

#### Example:
1. **Create a Bean Class**

```java
package com.example;

import org.springframework.stereotype.Component;

@Component
public class MyBean {
    private String propertyName = "Annotation Bean";

    public void customInit() {
        System.out.println("Custom initialization logic executed.");
    }

    public void customDestroy() {
        System.out.println("Custom destroy logic executed.");
    }

    @Override
    public String toString() {
        return "MyBean [propertyName=" + propertyName + "]";
    }
}
```

2. **Create a Main Class**

```java
package com.example;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Main {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

        MyBean myBean = context.getBean(MyBean.class);
        System.out.println(myBean);

        context.close();
    }
}
```

3. **Create a Configuration Class**

```java
package com.example;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan("com.example")
public class AppConfig {
}
```

---

### 2. Using Java Configuration
Instead of using XML, you can define beans programmatically.

#### Example:

1. **Create a Bean Class**

```java
package com.example;

public class MyJavaBean {
    private String message;

    public MyJavaBean(String message) {
        this.message = message;
    }

    @Override
    public String toString() {
        return "MyJavaBean [message=" + message + "]";
    }
}
```

2. **Create a Configuration Class**

```java
package com.example;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {

    @Bean
    public MyJavaBean myJavaBean() {
        return new MyJavaBean("Java Configuration Bean");
    }
}
```

3. **Main Class**

```java
package com.example;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Main {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

        MyJavaBean myJavaBean = context.getBean(MyJavaBean.class);
        System.out.println(myJavaBean);

        context.close();
    }
}
```

---

## Annotations in Spring IoC

| Annotation      | Description                                      |
|-----------------|--------------------------------------------------|
| `@Component`    | Marks a class as a Spring-managed bean.          |
| `@Bean`         | Declares a bean in Java configuration.           |
| `@Configuration`| Indicates that a class contains bean definitions.|
| `@Autowired`    | Injects dependencies automatically.              |
| `@Qualifier`    | Specifies the exact bean to inject.              |

---

## Summary
| Concept              | XML Configuration    | Annotation-Based Configuration |
|----------------------|----------------------|--------------------------------|
| Bean Definition       | `<bean>` tag         | `@Component`, `@Bean`          |
| Dependency Injection  | `<property>`, `<constructor-arg>` | `@Autowired`, `@Qualifier` |
| Lifecycle Methods     | `init-method`, `destroy-method` | `@PostConstruct`, `@PreDestroy` |
| Container Type        | `ClassPathXmlApplicationContext` | `AnnotationConfigApplicationContext` |

---

### Maven Dependencies
Add the following dependencies to your `pom.xml` file to use Spring Core and Spring Context modules.

```xml
<dependencies>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>5.3.12</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>5.3.12</version>
    </dependency>
</dependencies>
```

---

## Conclusion
Spring IoC offers flexibility in managing object creation and dependency injection using XML, annotations, and Java-based configurations. Understanding these methods helps in creating robust, scalable, and maintainable Spring applications.

